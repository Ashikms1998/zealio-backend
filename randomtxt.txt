// app.tsx
import MessageRoutes from "./presentation/router/MessageRoutes";
import { validateToken } from "./presentation/middleware/validateToken";

// Apply authentication middleware to all chat routes
app.use("/chat", validateToken, MessageRoutes);

// Frontend useEffect
useEffect(() => {
  const getConversations = async () => {
    setLoading(true);
    try {
      const response = await axios.post(`${url}/chat/userLog`);
      // Handle successful response
      setConversations(response.data.data);
    } catch (error) {
      // Handle error
      console.error("Failed to fetch conversations:", error);
      // Optionally set an error state or show a notification to the user
    } finally {
      setLoading(false);
    }
  };

  getConversations();
}, []);

// MessageRoutes.ts
import express from "express";
import { MessageController } from "../controllers/MessageController";
import { MessageService } from "../../services/MessageService";
import { MessageRepository } from "../../database/repository/MessageRepository";

const router = express.Router();

const repository = new MessageRepository();
const service = new MessageService(repository);
const controller = new MessageController(service);

router.post("/userLog", controller.userList.bind(controller));

export default router;

// IMessageRepository.ts
import { User } from "../entities/User";

export interface IMessageRepository {
  findUsers(page: number, limit: number): Promise<{ users: User[], total: number }>;
}

// MessageRepository.ts
import { User } from "../../entities/User";
import { IMessageRepository } from "../../interfaces/IMessageRepository";
import { User as UserModel } from "../models/UserSchema";

export class MessageRepository implements IMessageRepository {
  async findUsers(page: number = 1, limit: number = 10): Promise<{ users: User[], total: number }> {
    try {
      const skip = (page - 1) * limit;
      const [documents, total] = await Promise.all([
        UserModel.find().skip(skip).limit(limit),
        UserModel.countDocuments()
      ]);

      const users = documents.map(this.mapUserDocument);

      return { users, total };
    } catch (error) {
      console.error("Error during finding all users:", error);
      throw error;
    }
  }

  private mapUserDocument(doc: any): User {
    return {
      id: doc._id.toString(),
      firstName: doc.firstName,
      lastName: doc.lastName ?? "",
      email: doc.email,
      password: doc.password ?? "",
      verify_token: doc.verify_token ?? "",
      verified: doc.verified,
      isBlocked: doc.isBlocked ?? false
    };
  }
}

// MessageService.ts
import { User } from "../entities/User";
import { IMessage } from "../interfaces/IMessage";
import { IMessageRepository } from "../interfaces/IMessageRepository";

export class MessageService implements IMessage {
  private repository: IMessageRepository;

  constructor(repository: IMessageRepository) {
    this.repository = repository;
  }

  async allUsers(page: number = 1, limit: number = 10): Promise<{ users: User[], total: number }> {
    return await this.repository.findUsers(page, limit);
  }
}

// MessageController.ts
import { Request, Response, NextFunction } from "express";
import { IMessage } from "../../interfaces/IMessage";
import { validateUserListInput } from "../validators/userValidators";

export class MessageController {
  private messageService: IMessage;

  constructor(messageService: IMessage) {
    this.messageService = messageService;
  }

  async userList(req: Request, res: Response, next: NextFunction) {
    try {
      const { error, value } = validateUserListInput(req.query);
      if (error) {
        return res.status(400).json({ message: "Invalid input", error: error.details });
      }

      const { page, limit } = value;
      const { users, total } = await this.messageService.allUsers(page, limit);

      if (users.length === 0) {
        return res.status(404).json({ message: "No users found" });
      }

      res.status(200).json({
        message: "Users retrieved successfully",
        data: users,
        pagination: {
          total,
          page,
          limit,
          pages: Math.ceil(total / limit)
        }
      });
    } catch (error) {
      next(error);
    }
  }
}

// userValidators.ts
import Joi from "joi";

export const validateUserListInput = (input: any) => {
  const schema = Joi.object({
    page: Joi.number().integer().min(1).default(1),
    limit: Joi.number().integer().min(1).max(100).default(10)
  });

  return schema.validate(input);
};

// errorHandler.ts (new file)
import { Request, Response, NextFunction } from "express";

export const errorHandler = (err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error(err.stack);

  res.status(500).json({
    message: "An unexpected error occurred",
    error: process.env.NODE_ENV === "production" ? "Internal Server Error" : err.message
  });
};

// Add this to your main Express app file
app.use(errorHandler);