"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const router = express_1.default.Router();
const AuthController_1 = require("../controllers/AuthController");
const UserRepository_1 = require("../../database/repository/UserRepository");
const UserService_1 = require("../../services/UserService");
const mailer_1 = require("../../external-libraries/mailer");
const bcrypt_1 = require("../../external-libraries/bcrypt");
const Token_1 = require("../../external-libraries/Token");
const passport_1 = __importDefault(require("passport"));
const validateToken_1 = require("../middleware/validateToken");
const repository = new UserRepository_1.UserRepository();
const bcrypt = new bcrypt_1.Bcrypt();
const mailer = new mailer_1.Mailer();
const token = new Token_1.Token();
const auth = new UserService_1.authService(repository, bcrypt, mailer, token);
const controller = new AuthController_1.authController(auth);
router.post("/signup", controller.userRegistration.bind(controller));
router.get("/verify-email", controller.userVerification.bind(controller));
router.post("/login", controller.onLoginUser.bind(controller));
router.post("/forgot-password", controller.ForgotPassword.bind(controller));
router.get("/otp", controller.passwordReset.bind(controller));
router.post("/otp", controller.passwordReset.bind(controller));
router.post("/resetpassword", controller.passwordChanging.bind(controller));
router.post("/admin-login", controller.adminLogin.bind(controller));
router.post("/userLog", controller.userList.bind(controller));
router.post("/resendOtp", controller.otpResend.bind(controller));
router.get("/google", passport_1.default.authenticate("google", { scope: ["profile", "email"] }));
router.get("/google/callback", passport_1.default.authenticate("google", { session: false }), controller.authCallbackController.bind(controller));
router.get("/users/search", controller.userQuery.bind(controller));
router.put("/users/block-unblock", controller.checkBlocked.bind(controller));
router.post("/addtask", validateToken_1.validateToken, controller.addTask.bind(controller));
router.get("/fetchTodo", controller.fetchingTasks.bind(controller));
router.delete("/deleteTask", controller.deleteTask.bind(controller));
router.put("/updateTaskCompleation", controller.updateTaskCompleation.bind(controller));
router.get("/userDetails", validateToken_1.validateToken, controller.onUserFind.bind(controller));
exports.default = router;
